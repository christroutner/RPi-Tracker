
var globalThis; //Used in functions below when 'this' loses context.
//var coordinateBuffer = []; //Used to collect coordinate and time data between timer events.

function GPSInterface() {

  //Used in functions below when 'this' loses context.
  globalThis = this;
  
  this.coordinateBuffer = []; //Used to collect coordinate and time data between timer events.
  
  this.connectToGPS = function() {
    debugger;
    console.log('Hello World!');
  }
 
  /*
  * Utility function for converting between Degrees, Minutes Seconds (Raw GPS output) and Decimal Degree (Google Maps) format.
  */
  this.ConvertDMSToDD = function(degrees, minutes, seconds, direction) {
      var dd = degrees + minutes/60 + seconds/(60*60);

      if (direction == "S" || direction == "W") {
          dd = dd * -1;
      } // Don't do anything for N or E
      return dd;
  }
  
  // parse is false, so only raw data gets emitted.
  // This function reacts to different NMEA sentences as they are generated by GPS.
  // Coordinates are collected into a buffer and then averages inside the interval timer event.
  this.readNMEASentences = function(data) {
    //debugger;
    //console.log(data);

    var nmeaCode = data.slice(1,6);

    //Choose a different action based on the incoming NMEA sentence header
    switch(nmeaCode) {
      case "GPZDA":
        //Note Hour, Minute, Second, Microsecond is in UTC format.
        var year = Number(data.slice(23,27));
        var month = Number(data.slice(20,22))-1;
        var day = Number(data.slice(17,19));
        var hour = Number(data.slice(7,9));
        var minute = Number(data.slice(9,11));
        var second = Number(data.slice(11,13));
        var millisecond = Number(data.slice(14,16));

        //Used for debugging.
        //var gpsDate = new Date(year, month, day, hour, minute, second, millisecond);
        //console.log('GPS Time Stamp: '+gpsDate);

        timeStamp = new Date(year, month, day, hour, minute, second, millisecond);

        break;

      case "GPGGA":
        //debugger;


        //Retrieve Lat and Long, but convert coordinates. BU-353 reports coordinate in DMD format.
        //Google watch coordinates in DD format.
        //debugger;
        //Convert Degrees,minutes,seconds (DMS) to Degrees, decimal degrees (DD)
        //var lat = ConvertDMSToDD(Number(data.slice(14,16)),Number(data.slice(16,18)),Number(data.slice(19,23))/100,data.slice(24,25));
        //var long = ConvertDMSToDD(Number(data.slice(26,29)), Number(data.slice(29,31)), Number(data.slice(32,36))/100, data.slice(37,38));      
        //Convert Degrees, minutes, decimal minutes (DMD) to Degrees, decimal degrees (DD)
        var lat = globalThis.ConvertDMSToDD(Number(data.slice(14,16)),Number(data.slice(16,23)),0,data.slice(24,25));
        var long = globalThis.ConvertDMSToDD(Number(data.slice(26,29)), Number(data.slice(29,36)), 0, data.slice(37,38));

        //Used for debugging.
        //console.log(data);
        //console.log('Lat: '+data.slice(14,16)+','+data.slice(16,18)+','+Number(data.slice(19,23))/100+','+data.slice(24,25));
        //console.log('Coordinates: '+lat+', '+long);

        //Push the newest coordinate into the buffer.
        globalThis.coordinateBuffer.push(
          [long, lat, 0.01] //third number is elevation, to be implemented at a later date.
        );

        /*
        coordinatePointBuffer.push(
          //this code used to record Points
          //{ 
          //  "type": "Feature",
          //  "geometry": {"type": "Point", "coordinates": [long, lat]}
          //}

          { 
            "type": "Feature",
            "geometry": {"type": "Point", "coordinates": [long, lat]},
            "properties": 
            {
              "timestamp": timeStamp,
              "name": timeStamp
            }
          }
        );
        */

        break;

      default:
        //console.log('Rejected '+nmeaCode);
        //console.log(data);
        break;
    }

  }
  
  return(this);
  
}

exports.GPSInterface = GPSInterface;